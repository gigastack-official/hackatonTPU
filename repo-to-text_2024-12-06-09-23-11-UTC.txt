Directory: hackatonTPU

Directory Structure:
```
.
.
├── ./.env
├── ./.git
│   ├── ./.git/COMMIT_EDITMSG
│   ├── ./.git/HEAD
│   ├── ./.git/ORIG_HEAD
│   ├── ./.git/config
│   ├── ./.git/description
│   ├── ./.git/hooks
│   │   ├── ./.git/hooks/applypatch-msg.sample
│   │   ├── ./.git/hooks/commit-msg.sample
│   │   ├── ./.git/hooks/fsmonitor-watchman.sample
│   │   ├── ./.git/hooks/post-update.sample
│   │   ├── ./.git/hooks/pre-applypatch.sample
│   │   ├── ./.git/hooks/pre-commit.sample
│   │   ├── ./.git/hooks/pre-merge-commit.sample
│   │   ├── ./.git/hooks/pre-push.sample
│   │   ├── ./.git/hooks/pre-rebase.sample
│   │   ├── ./.git/hooks/pre-receive.sample
│   │   ├── ./.git/hooks/prepare-commit-msg.sample
│   │   ├── ./.git/hooks/push-to-checkout.sample
│   │   ├── ./.git/hooks/sendemail-validate.sample
│   │   └── ./.git/hooks/update.sample
│   ├── ./.git/index
│   ├── ./.git/info
│   │   └── ./.git/info/exclude
│   ├── ./.git/logs
│   │   ├── ./.git/logs/HEAD
│   │       ├── ./.git/logs/refs/heads
│   │       │   └── ./.git/logs/refs/heads/main
│   │           └── ./.git/logs/refs/remotes/origin
│   │               ├── ./.git/logs/refs/remotes/origin/HEAD
│   │               └── ./.git/logs/refs/remotes/origin/main
│   │   ├── ./.git/objects/00
│   │   │   └── ./.git/objects/00/c092a91ec3d89bae6e7f6017068c8f6137859a
│   │   ├── ./.git/objects/04
│   │   │   └── ./.git/objects/04/046aa673642e7dbd921a40a55c3fd7754b7551
│   │   ├── ./.git/objects/09
│   │   │   └── ./.git/objects/09/faf5dff2a3a84598bf6e609db700e0f17a9a7a
│   │   ├── ./.git/objects/10
│   │   │   └── ./.git/objects/10/c6759af444e4489e5419dec501a98cdbb78927
│   │   ├── ./.git/objects/13
│   │   │   └── ./.git/objects/13/5cca677a2cacc2be8c498ad19d40507ed3fb7d
│   │   ├── ./.git/objects/29
│   │   │   └── ./.git/objects/29/4466076f40cae485c67d2492a0f68cbe989bfa
│   │   ├── ./.git/objects/2a
│   │   │   └── ./.git/objects/2a/5a7270dad411e370f19ef88596f3855db51493
│   │   ├── ./.git/objects/2d
│   │   │   └── ./.git/objects/2d/4867923e289e72e46e883daa084feed5f680b6
│   │   ├── ./.git/objects/30
│   │   │   ├── ./.git/objects/30/5e0c019295ecce408a1a00f72ae912fbf07de9
│   │   │   └── ./.git/objects/30/71031f00d5109c7274e4c8b8d44224a20958ce
│   │   ├── ./.git/objects/3c
│   │   │   └── ./.git/objects/3c/7f8895862b64ad9a02127ae31485b56f9af1d8
│   │   ├── ./.git/objects/3e
│   │   │   ├── ./.git/objects/3e/53a3068a9543d84b8c1d461f8f5f7e8704a78a
│   │   │   └── ./.git/objects/3e/d4dda292663336c3aa50b873a8578871544435
│   │   ├── ./.git/objects/40
│   │   │   └── ./.git/objects/40/49126138eae2b52c885d668bb416424b039233
│   │   ├── ./.git/objects/43
│   │   │   └── ./.git/objects/43/a0d0ba1e586b3d00593a4b6ea6cf9439593b79
│   │   ├── ./.git/objects/47
│   │   │   └── ./.git/objects/47/22d101762bd2538605c4e6dfcc56b00843bb9d
│   │   ├── ./.git/objects/48
│   │   │   └── ./.git/objects/48/4603721f097488688b9cee1857ba1374b4a58e
│   │   ├── ./.git/objects/4c
│   │   │   ├── ./.git/objects/4c/0c19a3edfe83243224569c989f1650154c000e
│   │   │   └── ./.git/objects/4c/356b7d582d819971f832ddf06a57173e866b19
│   │   ├── ./.git/objects/4e
│   │   │   └── ./.git/objects/4e/54d784357cb897d9ffb180a067c6b16aaabe36
│   │   ├── ./.git/objects/50
│   │   │   ├── ./.git/objects/50/6179795bbd867840a165a2b993315b1426791f
│   │   │   └── ./.git/objects/50/a401011c408cda178c83e25aa8acf71ac75f22
│   │   ├── ./.git/objects/55
│   │   │   └── ./.git/objects/55/aabffa20ac2e1967ff901e8fcb1b64584e1231
│   │   ├── ./.git/objects/59
│   │   │   ├── ./.git/objects/59/47c5eb5e2d83649d27347ba1be2dbb205af299
│   │   │   └── ./.git/objects/59/d418d92738862174cc0094bbd705b7db0cc17e
│   │   ├── ./.git/objects/5a
│   │   │   └── ./.git/objects/5a/a32cdea8c74c6631544f37437f2e6481f01e0d
│   │   ├── ./.git/objects/63
│   │   │   └── ./.git/objects/63/1b7fb7dbefe1e695207c87ffb0fbb250361357
│   │   ├── ./.git/objects/67
│   │   │   └── ./.git/objects/67/402ffb1c4a9e72808bef237636b75ff5b783f0
│   │   ├── ./.git/objects/69
│   │   │   └── ./.git/objects/69/9b74f85808f93937694e69ed2a02d62bbbf95e
│   │   ├── ./.git/objects/6e
│   │   │   └── ./.git/objects/6e/e4b15ce87820fd3aeb10fa8a0239904ff4091a
│   │   ├── ./.git/objects/70
│   │   │   ├── ./.git/objects/70/0b3e3f3480e89bd4537559a5fbe24f2a561506
│   │   │   └── ./.git/objects/70/9c418c922a64bebfee8b63081e1c70e8d1a361
│   │   ├── ./.git/objects/73
│   │   │   └── ./.git/objects/73/20c2084b4f3c39ac6e0ee9032017007dc32d81
│   │   ├── ./.git/objects/78
│   │   │   └── ./.git/objects/78/4b5f266c621b47e360a872e543a3e20d369c5a
│   │   ├── ./.git/objects/7a
│   │   │   └── ./.git/objects/7a/8cf56b096fe024c14d00210cc20cc432923461
│   │   ├── ./.git/objects/7d
│   │   │   └── ./.git/objects/7d/a6a1dff64f68034702da896f58fbbbeeaf762b
│   │   ├── ./.git/objects/80
│   │   │   └── ./.git/objects/80/ff2e325650840e92c112e1df76d45cf3793235
│   │   ├── ./.git/objects/84
│   │   │   └── ./.git/objects/84/3da392c0f92f830e66358fee2c57aa30d48d5b
│   │   ├── ./.git/objects/87
│   │   │   └── ./.git/objects/87/3f92c57c99e04c55bd5fa18464f30da2abe0ce
│   │   ├── ./.git/objects/89
│   │   │   └── ./.git/objects/89/6552efc7032a26085b1dbdf926c4a2d37d9bc8
│   │   ├── ./.git/objects/8a
│   │   │   ├── ./.git/objects/8a/6c71c13169cd7d44f24398a1e87cdc00994205
│   │   │   └── ./.git/objects/8a/d24a907a9b908afe608be7f44aaad938533bc3
│   │   ├── ./.git/objects/8b
│   │   │   └── ./.git/objects/8b/2a762e4bdd93bdd229b3a74f8cf997c079d9e3
│   │   ├── ./.git/objects/8e
│   │   │   └── ./.git/objects/8e/1dde483e42f5339cf1f79fcdfa6f1faf289327
│   │   ├── ./.git/objects/90
│   │   │   └── ./.git/objects/90/4eb16551644efd0b905d7a0ff2e6675c09e12e
│   │   ├── ./.git/objects/92
│   │   │   └── ./.git/objects/92/d49524c59ab793ab63905ad30ec5f26d2422dc
│   │   ├── ./.git/objects/93
│   │   │   └── ./.git/objects/93/4b783b699928c8f6887ab240cfd4f42a4d6376
│   │   ├── ./.git/objects/95
│   │   │   └── ./.git/objects/95/e637977276ea032d7b9a038674d4ae744c0265
│   │   ├── ./.git/objects/96
│   │   │   └── ./.git/objects/96/0a14a58d16c88e529e0588190ac77c83f1830a
│   │   ├── ./.git/objects/99
│   │   │   ├── ./.git/objects/99/29cb658ca26d154e1a306b115a2599272ad2ae
│   │   │   ├── ./.git/objects/99/a26fc3c4e8fa491ccd61afb651413cb4fd8e69
│   │   │   └── ./.git/objects/99/c0c1db76a6e37da9e092baf8065b72cb6e0697
│   │   ├── ./.git/objects/9a
│   │   │   └── ./.git/objects/9a/cc1e67b9f3c43094db2b717d4c97a7cd04a64d
│   │   ├── ./.git/objects/9c
│   │   │   └── ./.git/objects/9c/f224cd9aaba4edbedde7d5ee6a2febd0bb20e5
│   │   ├── ./.git/objects/9d
│   │   │   └── ./.git/objects/9d/89bfcaec0c0f75513c60757f182882a63246b7
│   │   ├── ./.git/objects/9e
│   │   │   └── ./.git/objects/9e/20683a4aa9272aacc0bc7db9712d3b37c6b930
│   │   ├── ./.git/objects/a3
│   │   │   └── ./.git/objects/a3/cb7a087fcacec6f0743655a458500b5235c9ff
│   │   ├── ./.git/objects/a9
│   │   │   └── ./.git/objects/a9/831a161eae8959fa433f8710e6ed64461beecc
│   │   ├── ./.git/objects/aa
│   │   │   └── ./.git/objects/aa/acff76ac1566a9d58d961e8e79b6d4f88b35f4
│   │   ├── ./.git/objects/ad
│   │   │   └── ./.git/objects/ad/4b39ab65723c81f7838ed58ebcd4df4521dfd8
│   │   ├── ./.git/objects/af
│   │   │   └── ./.git/objects/af/d139edac7a93f9f2fb2b755c73a65bc942d0a3
│   │   ├── ./.git/objects/b4
│   │   │   └── ./.git/objects/b4/decf517db507d8bdc705796f5ea52ed8d09fa1
│   │   ├── ./.git/objects/bc
│   │   │   ├── ./.git/objects/bc/06421c1a6beb76e1f2882d7dcccf88bf33455e
│   │   │   ├── ./.git/objects/bc/b75a2b334a06d3ceb2fedce7d8f97f44bebe52
│   │   │   └── ./.git/objects/bc/e09db6025d4e418db0c36211f771f3b8d3a11a
│   │   ├── ./.git/objects/bf
│   │   │   └── ./.git/objects/bf/0ea1fe4da46434c03d21e53c7767200939aeb9
│   │   ├── ./.git/objects/c4
│   │   │   └── ./.git/objects/c4/f344a80cfa466de092da0f548a27700f3bf38f
│   │   ├── ./.git/objects/c5
│   │   │   ├── ./.git/objects/c5/7f2e500860b760173cf2674b82cfdef065ca0d
│   │   │   ├── ./.git/objects/c5/9410dae00415d93b559a6d4e6698b7b6d2c02a
│   │   │   └── ./.git/objects/c5/aa51576c929fd7a4f98d168766f196d6c6142a
│   │   ├── ./.git/objects/c6
│   │   │   ├── ./.git/objects/c6/20a752d5c2862394f246e0e66562afe7fcd230
│   │   │   └── ./.git/objects/c6/fe10879f27142d29808987edb47b7536a04594
│   │   ├── ./.git/objects/c7
│   │   │   └── ./.git/objects/c7/fb442aaa41f57f3532df9f170e15e5b2e0a50d
│   │   ├── ./.git/objects/c9
│   │   │   └── ./.git/objects/c9/614c2419104b16b8e8eacf84e1f903eaadb9f2
│   │   ├── ./.git/objects/cc
│   │   │   └── ./.git/objects/cc/7709faa54325c77780675a1a1c32ffe3fd90f2
│   │   ├── ./.git/objects/ce
│   │   │   ├── ./.git/objects/ce/1579eab1eb3f77f201276e61f4f58f80caa3a8
│   │   │   └── ./.git/objects/ce/2a026698b173b7619e86b0bbffd5f1a2bd1bfa
│   │   ├── ./.git/objects/d0
│   │   │   └── ./.git/objects/d0/41787e19f24836f75bad650a78cd0babdfaf68
│   │   ├── ./.git/objects/da
│   │   │   ├── ./.git/objects/da/7f7f56927211e728eef282d382402e88a50593
│   │   │   └── ./.git/objects/da/f143be3c399d5f4ada283e2eff2a74c58b6aeb
│   │   ├── ./.git/objects/db
│   │   │   └── ./.git/objects/db/eb239f82e0382e6b0f27d9039894c95f25b61a
│   │   ├── ./.git/objects/dd
│   │   │   ├── ./.git/objects/dd/07589f16bca5bb8a62d93d58b54032a4cbde47
│   │   │   └── ./.git/objects/dd/5c002106efb837ab6421a4a8e8e60b76cca6ed
│   │   ├── ./.git/objects/de
│   │   │   └── ./.git/objects/de/6f607f3aa0ae731699cbdd1513fed2863305c6
│   │   ├── ./.git/objects/e3
│   │   │   └── ./.git/objects/e3/1af39d4b994ce3cd2230cff97e429c8a14287a
│   │   ├── ./.git/objects/e9
│   │   │   ├── ./.git/objects/e9/29a091a4c89b8120207dfdfff2045b8c10075a
│   │   │   └── ./.git/objects/e9/db254064f20a33af04a16339f8b150433429db
│   │   ├── ./.git/objects/ea
│   │   │   └── ./.git/objects/ea/0b47d2a5f4c0e7468f65d225395db1c71cd243
│   │   ├── ./.git/objects/f2
│   │   │   └── ./.git/objects/f2/2e46aa967e7e8adf531790c0fd9a75e50ab7e4
│   │   ├── ./.git/objects/f9
│   │   │   └── ./.git/objects/f9/05d6a93046126c78f79948b97120b8d4d9b2c6
│   │   ├── ./.git/objects/fc
│   │   │   └── ./.git/objects/fc/ef465af7127359f949cf0a62354fdba22ec126
│   │   ├── ./.git/objects/fe
│   │   │   └── ./.git/objects/fe/33d64489dab8da13e6e54db15968e431913c96
│   │   ├── ./.git/objects/ff
│   │   │   └── ./.git/objects/ff/49d9b39a218aa4676ab30008c20b05c5e2199f
│   │   └── ./.git/objects/pack
│   │       ├── ./.git/objects/pack/pack-61802affb2d70b238904b1e3e22573848fa105be.idx
│   │       ├── ./.git/objects/pack/pack-61802affb2d70b238904b1e3e22573848fa105be.pack
│   │       └── ./.git/objects/pack/pack-61802affb2d70b238904b1e3e22573848fa105be.rev
│   ├── ./.git/packed-refs
│       ├── ./.git/refs/heads
│       │   └── ./.git/refs/heads/main
│       │   └── ./.git/refs/remotes/origin
│       │       ├── ./.git/refs/remotes/origin/HEAD
│       │       └── ./.git/refs/remotes/origin/main
├── ./Dockerfile
├── ./README.md
├── ./__init__.py
├── ./api
│   ├── ./api/.dockerignore
│   ├── ./api/__init__.py
│   ├── ./api/__pycache__
│   │   ├── ./api/__pycache__/__init__.cpython-310.pyc
│   │   ├── ./api/__pycache__/admin.cpython-310.pyc
│   │   ├── ./api/__pycache__/apps.cpython-310.pyc
│   │   ├── ./api/__pycache__/consumers.cpython-310.pyc
│   │   ├── ./api/__pycache__/filters.cpython-310.pyc
│   │   ├── ./api/__pycache__/models.cpython-310.pyc
│   │   ├── ./api/__pycache__/permissions.cpython-310.pyc
│   │   ├── ./api/__pycache__/routing.cpython-310.pyc
│   │   ├── ./api/__pycache__/serializers.cpython-310.pyc
│   │   ├── ./api/__pycache__/urls.cpython-310.pyc
│   │   └── ./api/__pycache__/views.cpython-310.pyc
│   ├── ./api/admin.py
│   ├── ./api/apps.py
│   ├── ./api/consumers.py
│   ├── ./api/filters.py
│   ├── ./api/migrations
│   │   ├── ./api/migrations/0001_initial.py
│   │   ├── ./api/migrations/0002_device_lightingmode_measurement_sensor_delete_post_and_more.py
│   │   ├── ./api/migrations/0003_deviceinspection.py
│   │   ├── ./api/migrations/0004_remove_deviceinspection_device_delete_lightingmode_and_more.py
│   │   ├── ./api/migrations/0005_initial.py
│   │   ├── ./api/migrations/0006_devicestate_inspectionitem_stationreading_and_more.py
│   │   ├── ./api/migrations/0007_colorsensor_lightsensor_moisturesensor_and_more.py
│   │   ├── ./api/migrations/0008_accelerometer_currentsensor_distancesensor_fan_and_more.py
│   │   ├── ./api/migrations/0009_command.py
│   │   ├── ./api/migrations/0010_remove_command_user_name_command_user_and_more.py
│   │   ├── ./api/migrations/__init__.py
│   │   └── ./api/migrations/__pycache__
│   │       ├── ./api/migrations/__pycache__/0001_initial.cpython-310.pyc
│   │       ├── ./api/migrations/__pycache__/0002_device_lightingmode_measurement_sensor_delete_post_and_more.cpython-310.pyc
│   │       ├── ./api/migrations/__pycache__/0003_deviceinspection.cpython-310.pyc
│   │       ├── ./api/migrations/__pycache__/0004_remove_deviceinspection_device_delete_lightingmode_and_more.cpython-310.pyc
│   │       ├── ./api/migrations/__pycache__/0005_initial.cpython-310.pyc
│   │       ├── ./api/migrations/__pycache__/0006_devicestate_inspectionitem_stationreading_and_more.cpython-310.pyc
│   │       ├── ./api/migrations/__pycache__/0007_colorsensor_lightsensor_moisturesensor_and_more.cpython-310.pyc
│   │       ├── ./api/migrations/__pycache__/0008_accelerometer_currentsensor_distancesensor_fan_and_more.cpython-310.pyc
│   │       ├── ./api/migrations/__pycache__/0009_command.cpython-310.pyc
│   │       ├── ./api/migrations/__pycache__/0010_remove_command_user_name_command_user_and_more.cpython-310.pyc
│   │       └── ./api/migrations/__pycache__/__init__.cpython-310.pyc
│   ├── ./api/models.py
│   ├── ./api/permissions.py
│   ├── ./api/routing.py
│   ├── ./api/serializers.py
│   ├── ./api/tests.py
│   ├── ./api/urls.py
│   └── ./api/views.py
├── ./backendApp
│   ├── ./backendApp/__init__.py
│   ├── ./backendApp/__pycache__
│   │   ├── ./backendApp/__pycache__/__init__.cpython-310.pyc
│   │   ├── ./backendApp/__pycache__/asgi.cpython-310.pyc
│   │   ├── ./backendApp/__pycache__/settings.cpython-310.pyc
│   │   └── ./backendApp/__pycache__/urls.cpython-310.pyc
│   ├── ./backendApp/asgi.py
│   ├── ./backendApp/routing.py
│   ├── ./backendApp/settings.py
│   ├── ./backendApp/urls.py
│   └── ./backendApp/wsgi.py
├── ./docker-compose.yml
├── ./manage.py
├── ./requirements.txt
```

Contents of requirements.txt:
```
api==0.0.7
asgiref==3.8.1
certifi==2024.8.30
channels==4.0.0
charset-normalizer==3.4.0
consumers==0.6.1
Django==4.2.16
django-cors-headers==4.6.0
django-filter==24.3
djangorestframework==3.15.2
djangorestframework-simplejwt==5.3.1
drf-yasg==1.21.7
idna==3.10
inflection==0.5.1
nose==1.3.7
packaging==24.1
psycopg2-binary==2.9.9
PyJWT==2.9.0
python-dotenv==1.0.0
pytz==2024.2
PyYAML==6.0.2
requests==2.32.3
routing==0.2.0
signals==0.0.2
sqlparse==0.5.1
typing_extensions==4.12.2
uritemplate==4.1.1
urllib3==2.2.3
daphne==4.0.0
channels-redis==4.0.0

```

Contents of Dockerfile:
```
# Dockerfile

# Используем официальный образ Python в качестве базового
FROM python:3.10-slim

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Устанавливаем зависимости системы
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Копируем файл с зависимостями и устанавливаем их
COPY requirements.txt .
RUN pip install --upgrade pip
RUN pip install -r requirements.txt

# Копируем весь код проекта в рабочую директорию
COPY . .

# Создаем директорию для статических файлов
RUN mkdir -p /app/staticfiles

# Собираем статические файлы
RUN python manage.py collectstatic --noinput

# Открываем порт, который будет использоваться приложением
EXPOSE 8000

# Определяем команду для запуска приложения с использованием Daphne
CMD ["daphne", "-b", "0.0.0.0", "-p", "8000", "backendApp.asgi:application"]

```

Contents of __init__.py:
```

```

Contents of README.md:
```
python manage.py makemigrations
python manage.py migrate

python manage.py runserver 0.0.0.0:8000

```

Contents of .env:
```
# .env

# Django settings
DEBUG=1
SECRET_KEY = 'django-insecure-*=%63ai6vhs#^!&_e3s=5&*o@u=3uwxc*@g$*hp&$3-h2*&qll'
DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1] hackatonTPU 192.168.0.77

# Database settings
DB_NAME=hacatonTPU
DB_USER=postgres
#DB_PASSWORD=
DB_PASSWORD=postgres
#DB_HOST=localhost
DB_HOST=db
DB_PORT=5432

# Другие переменные окружения

```

Contents of docker-compose.yml:
```
services:
  db:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_DB: hacatonTPU
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hackaton_network

  redis:
    image: redis:6
    restart: always
    ports:
      - "6379:6379"
    networks:
      - hackaton_network

  web:
    build: .
    command: ["daphne", "-b", "0.0.0.0", "-p", "8000", "backendApp.asgi:application"]
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - hackaton_network

networks:
  hackaton_network:

volumes:
  postgres_data:
  static_volume:

```

Contents of manage.py:
```
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backendApp.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```

Contents of backendApp/asgi.py:
```
import os
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack
from django.core.asgi import get_asgi_application
import api.routing

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backendApp.settings')

application = ProtocolTypeRouter({
    "http": get_asgi_application(),
    "websocket": AuthMiddlewareStack(
        URLRouter(
            api.routing.websocket_urlpatterns
        )
    ),
})

```

Contents of backendApp/__init__.py:
```

```

Contents of backendApp/routing.py:
```
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack
from django.core.asgi import get_asgi_application
import api.routing

application = ProtocolTypeRouter({
    "http": get_asgi_application(),
    "websocket": AuthMiddlewareStack(
        URLRouter(
            api.routing.websocket_urlpatterns
        )
    ),
})

```

Contents of backendApp/settings.py:
```
"""
Django settings for backendApp project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

# Загрузка переменных окружения из .env файла (если существует)
load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# SECURITY WARNING: don't run with debug turned on in production!

# Получение переменных окружения
DEBUG = int(os.environ.get('DEBUG', default=0))
SECRET_KEY = os.environ.get('SECRET_KEY', default='unsafe-secret-key')
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost').split(' ')



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'channels',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'drf_yasg',
    'django_filters',
    'api',
]
ASGI_APPLICATION = 'backendApp.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('redis', 6379)],
        },
    },
}
CORS_ALLOW_ALL_ORIGINS = True
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backendApp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backendApp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


# ...

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'hacatonTPU'),
        'USER': os.environ.get('DB_USER', 'postgres'),
        'PASSWORD': os.environ.get('DB_PASSWORD', ''),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


STATIC_URL = '/static/'

# Добавьте следующую строку для определения STATIC_ROOT
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Добавьте STATICFILES_STORAGE для версии файлов
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'description': 'JWT авторизация с помощью заголовка Bearer. Пример: "Bearer {токен}"',
            'name': 'Authorization',
            'in': 'header'
        }
    },
}

# Список ESP-устройств
ESP_DEVICES = [
    "http://192.168.0.234:8000/command",
    # Добавьте остальные устройства
]
```

Contents of backendApp/urls.py:
```
# backendApp/urls.py

from django.contrib import admin
from django.urls import path, include, re_path
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

schema_view = get_schema_view(
   openapi.Info(
      title="hackatonTPU API",
      default_version='v1',
      description="Документация API для проекта hackatonTPU",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="contact@yourdomain.com"),
      license=openapi.License(name="BSD License"),
   ),
   public=True,
   permission_classes=[permissions.AllowAny],
   authentication_classes=[],  # Убедитесь, что аутентификация не требуется для просмотра документации
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('api.urls')),
    re_path(r'^swagger(?P<format>\.json|\.yaml)$',
            schema_view.without_ui(cache_timeout=0), name='schema-json'),
    path('swagger/', schema_view.with_ui('swagger',
         cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc',
         cache_timeout=0), name='schema-redoc'),
]

```

Contents of backendApp/wsgi.py:
```
"""
WSGI config for backendApp project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backendApp.settings')

application = get_wsgi_application()

```

Contents of backendApp/__pycache__/asgi.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of backendApp/__pycache__/settings.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of backendApp/__pycache__/urls.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of backendApp/__pycache__/__init__.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/models.py:
```
from django.contrib.auth.models import User
from django.db import models

class LightSensor(models.Model):
    value = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"LightSensor {self.value} at {self.timestamp}"

class ColorSensor(models.Model):
    value = models.FloatField()
    is_detected = models.BooleanField(default=False)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"ColorSensor {self.value} - {'Detected' if self.is_detected else 'Not Detected'} at {self.timestamp}"

class WaterFlowSensor(models.Model):
    value = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"WaterFlowSensor {self.value} at {self.timestamp}"

class MoistureSensor(models.Model):
    value = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"MoistureSensor {self.value} at {self.timestamp}"

class OverflowSensor(models.Model):
    is_overflow = models.BooleanField(default=False)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"OverflowSensor {'Overflow' if self.is_overflow else 'Normal'} at {self.timestamp}"

# Новые модели сенсоров

class LeakSensor(models.Model):
    value = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"LeakSensor {self.value} at {self.timestamp}"

class LOSensor(models.Model):
    value = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"LOSensor {self.value} at {self.timestamp}"

class ReedSwitch1(models.Model):
    is_triggered = models.BooleanField(default=False)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"ReedSwitch1 {'Triggered' if self.is_triggered else 'Not Triggered'} at {self.timestamp}"

class ReedSwitch2(models.Model):
    is_triggered = models.BooleanField(default=False)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"ReedSwitch2 {'Triggered' if self.is_triggered else 'Not Triggered'} at {self.timestamp}"

class DistanceSensor(models.Model):
    value = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"DistanceSensor {self.value} at {self.timestamp}"

class CurrentSensor(models.Model):
    value = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"CurrentSensor {self.value} at {self.timestamp}"

class TemperatureSensor(models.Model):
    value = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"TemperatureSensor {self.value} at {self.timestamp}"

class Gyroscope(models.Model):
    gyro_x = models.FloatField()
    gyro_y = models.FloatField()
    gyro_z = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Gyroscope ({self.gyro_x}, {self.gyro_y}, {self.gyro_z}) at {self.timestamp}"

class Accelerometer(models.Model):
    accel_x = models.FloatField()
    accel_y = models.FloatField()
    accel_z = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Accelerometer ({self.accel_x}, {self.accel_y}, {self.accel_z}) at {self.timestamp}"

class Fan(models.Model):
    value = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Fan {self.value} at {self.timestamp}"

# api/models.py

from django.db import models

class Command(models.Model):
    COMMAND_CHOICES = [
        ('pump', 'Помпа'),
        ('led', 'Лента'),
        ('servo1', 'Серво №1'),
        ('servo2', 'Серво №2'),
        ('auto_light', 'Авто-свет'),
        ('brightness', 'Яркость'),
        ('fan', 'Вентилятор'),
        ('ventilation', 'Проветривание'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='commands')
    command_type = models.CharField(max_length=20, choices=COMMAND_CHOICES)
    value = models.CharField(max_length=100)  # Можно использовать другой тип в зависимости от команды
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.get_command_type_display()} - {self.value} by {self.user.username} at {self.timestamp}"


from django.contrib.auth.models import User
from django.db import models


class Alert(models.Model):
    ALERT_CHOICES = [
        ('earthquake', 'Землетрясение'),
        ('ventilation', 'Режим проветривания'),
    ]

    alert_type = models.CharField(max_length=20, choices=ALERT_CHOICES)
    is_active = models.BooleanField(default=False)
    timestamp = models.DateTimeField(auto_now_add=True)
    received_from = models.CharField(max_length=255, blank=True, null=True)  # IP или идентификатор ESP-устройства

    def __str__(self):
        status = "Активно" if self.is_active else "Не активно"
        return f"{self.get_alert_type_display()} - {status} at {self.timestamp}"

```

Contents of api/serializers.py:
```
from rest_framework import serializers
from django.contrib.auth.models import User
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer

from .models import (
    LightSensor, ColorSensor, WaterFlowSensor, MoistureSensor, OverflowSensor,
    LeakSensor, LOSensor, ReedSwitch1, ReedSwitch2, DistanceSensor,
    CurrentSensor, TemperatureSensor, Gyroscope, Accelerometer, Fan, Alert
)

class UserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ('id', 'username', 'email', 'password')

    def create(self, validated_data):
        user = User(
            email=validated_data.get('email'),
            username=validated_data['username']
        )
        user.set_password(validated_data['password'])
        user.save()
        return user

class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):

    def validate(self, attrs):
        data = super().validate(attrs)
        user = self.user
        if user.is_superuser:
            role = 'superadmin'
        elif user.is_staff:
            role = 'admin'
        else:
            role = 'user'
        data['role'] = role
        return data
class LightSensorSerializer(serializers.ModelSerializer):
    class Meta:
        model = LightSensor
        fields = '__all__'

class ColorSensorSerializer(serializers.ModelSerializer):
    class Meta:
        model = ColorSensor
        fields = '__all__'

class WaterFlowSensorSerializer(serializers.ModelSerializer):
    class Meta:
        model = WaterFlowSensor
        fields = '__all__'

class MoistureSensorSerializer(serializers.ModelSerializer):
    class Meta:
        model = MoistureSensor
        fields = '__all__'

class OverflowSensorSerializer(serializers.ModelSerializer):
    class Meta:
        model = OverflowSensor
        fields = '__all__'

# Сериализаторы для новых моделей

class LeakSensorSerializer(serializers.ModelSerializer):
    class Meta:
        model = LeakSensor
        fields = '__all__'

class LOSensorSerializer(serializers.ModelSerializer):
    class Meta:
        model = LOSensor
        fields = '__all__'

class ReedSwitch1Serializer(serializers.ModelSerializer):
    class Meta:
        model = ReedSwitch1
        fields = '__all__'

class ReedSwitch2Serializer(serializers.ModelSerializer):
    class Meta:
        model = ReedSwitch2
        fields = '__all__'

class DistanceSensorSerializer(serializers.ModelSerializer):
    class Meta:
        model = DistanceSensor
        fields = '__all__'

class CurrentSensorSerializer(serializers.ModelSerializer):
    class Meta:
        model = CurrentSensor
        fields = '__all__'

class TemperatureSensorSerializer(serializers.ModelSerializer):
    class Meta:
        model = TemperatureSensor
        fields = '__all__'

class GyroscopeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Gyroscope
        fields = '__all__'

class AccelerometerSerializer(serializers.ModelSerializer):
    class Meta:
        model = Accelerometer
        fields = '__all__'

class FanSerializer(serializers.ModelSerializer):
    class Meta:
        model = Fan
        fields = '__all__'


# api/serializers.py

from rest_framework import serializers
from .models import Command

class CommandSerializer(serializers.Serializer):
    pump = serializers.BooleanField(required=False)
    led = serializers.BooleanField(required=False)
    servo1 = serializers.BooleanField(required=False)
    servo2 = serializers.BooleanField(required=False)
    auto_light = serializers.BooleanField(required=False)
    brightness = serializers.FloatField(required=False)
    fan = serializers.BooleanField(required=False)
    ventilation = serializers.BooleanField(required=False)
    earthquake = serializers.BooleanField(required=False)
    user_name = serializers.CharField(required=False, allow_blank=True, allow_null=True)

    def validate_user_name(self, value):
        return value

class AlertSerializer(serializers.ModelSerializer):
    class Meta:
        model = Alert
        fields = ['alert_type', 'is_active', 'received_from']
        read_only_fields = ['timestamp']

from rest_framework import serializers

class DeviceStateSerializer(serializers.Serializer):
    pump = serializers.BooleanField()
    led = serializers.BooleanField()
    servo1 = serializers.BooleanField()
    servo2 = serializers.BooleanField()
    auto_light = serializers.BooleanField()
    brightness = serializers.FloatField()
    fan = serializers.BooleanField()
    ventilation = serializers.BooleanField()
    earthquake = serializers.BooleanField()

```

Contents of api/consumers.py:
```
import json
from channels.generic.websocket import AsyncWebsocketConsumer

class AlertConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        # Добавляем соединение в группу 'alerts'
        await self.channel_layer.group_add(
            "alerts",
            self.channel_name
        )
        await self.accept()

    async def disconnect(self, close_code):
        # Удаляем соединение из группы 'alerts'
        await self.channel_layer.group_discard(
            "alerts",
            self.channel_name
        )

    # Метод, который будет вызываться при получении сообщения из группы
    async def alert_message(self, event):
        message = event['message']
        # Отправляем сообщение на фронтенд
        await self.send(text_data=json.dumps(message))

```

Contents of api/__init__.py:
```

```

Contents of api/apps.py:
```
from django.apps import AppConfig

class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'

```

Contents of api/.dockerignore:
```
# .dockerignore

__pycache__
*.pyc
*.pyo
*.pyd
*.sqlite3
.env
.git
node_modules
staticfiles

```

Contents of api/admin.py:
```
from django.contrib import admin
from .models import (
    LightSensor, ColorSensor, WaterFlowSensor, MoistureSensor, OverflowSensor,
    LeakSensor, LOSensor, ReedSwitch1, ReedSwitch2, DistanceSensor,
    CurrentSensor, TemperatureSensor, Gyroscope, Accelerometer, Fan
)

@admin.register(LightSensor)
class LightSensorAdmin(admin.ModelAdmin):
    list_display = ('value', 'timestamp')
    list_filter = ('timestamp',)

@admin.register(ColorSensor)
class ColorSensorAdmin(admin.ModelAdmin):
    list_display = ('value', 'is_detected', 'timestamp')
    list_filter = ('is_detected', 'timestamp')

@admin.register(WaterFlowSensor)
class WaterFlowSensorAdmin(admin.ModelAdmin):
    list_display = ('value', 'timestamp')
    list_filter = ('timestamp',)

@admin.register(MoistureSensor)
class MoistureSensorAdmin(admin.ModelAdmin):
    list_display = ('value', 'timestamp')
    list_filter = ('timestamp',)

@admin.register(OverflowSensor)
class OverflowSensorAdmin(admin.ModelAdmin):
    list_display = ('is_overflow', 'timestamp')
    list_filter = ('is_overflow', 'timestamp')

# Регистрация новых моделей

@admin.register(LeakSensor)
class LeakSensorAdmin(admin.ModelAdmin):
    list_display = ('value', 'timestamp')
    list_filter = ('timestamp',)

@admin.register(LOSensor)
class LOSensorAdmin(admin.ModelAdmin):
    list_display = ('value', 'timestamp')
    list_filter = ('timestamp',)

@admin.register(ReedSwitch1)
class ReedSwitch1Admin(admin.ModelAdmin):
    list_display = ('is_triggered', 'timestamp')
    list_filter = ('is_triggered', 'timestamp')

@admin.register(ReedSwitch2)
class ReedSwitch2Admin(admin.ModelAdmin):
    list_display = ('is_triggered', 'timestamp')
    list_filter = ('is_triggered', 'timestamp')

@admin.register(DistanceSensor)
class DistanceSensorAdmin(admin.ModelAdmin):
    list_display = ('value', 'timestamp')
    list_filter = ('timestamp',)

@admin.register(CurrentSensor)
class CurrentSensorAdmin(admin.ModelAdmin):
    list_display = ('value', 'timestamp')
    list_filter = ('timestamp',)

@admin.register(TemperatureSensor)
class TemperatureSensorAdmin(admin.ModelAdmin):
    list_display = ('value', 'timestamp')
    list_filter = ('timestamp',)

@admin.register(Gyroscope)
class GyroscopeAdmin(admin.ModelAdmin):
    list_display = ('gyro_x', 'gyro_y', 'gyro_z', 'timestamp')
    list_filter = ('timestamp',)

@admin.register(Accelerometer)
class AccelerometerAdmin(admin.ModelAdmin):
    list_display = ('accel_x', 'accel_y', 'accel_z', 'timestamp')
    list_filter = ('timestamp',)

@admin.register(Fan)
class FanAdmin(admin.ModelAdmin):
    list_display = ('value', 'timestamp')
    list_filter = ('timestamp',)

```

Contents of api/routing.py:
```
from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'ws/alerts/$', consumers.AlertConsumer.as_asgi()),
]

```

Contents of api/permissions.py:
```
from rest_framework.permissions import BasePermission, SAFE_METHODS


class AllowCreateWithoutAuthentication(BasePermission):
    """
    Позволяет выполнять операции создания (POST) без аутентификации,
    остальные действия требуют аутентификации.
    """

    def has_permission(self, request, view):
        if request.method == 'POST':
            return True  # Разрешить все POST-запросы
        return request.user and request.user.is_authenticated  # Остальные запросы требуют аутентификации


class IsAdminUser(BasePermission):
    """
    Позволяет доступ только администратору.
    """

    def has_permission(self, request, view):
        return request.user and request.user.is_authenticated and request.user.is_staff

```

Contents of api/tests.py:
```
from django.test import TestCase

# Create your tests here.

```

Contents of api/urls.py:
```
from django.urls import path, include
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from rest_framework import routers
from .views import (
    RegisterView, LightSensorViewSet, ColorSensorViewSet, WaterFlowSensorViewSet,
    MoistureSensorViewSet, OverflowSensorViewSet, LeakSensorViewSet, LOSensorViewSet,
    ReedSwitch1ViewSet, ReedSwitch2ViewSet, DistanceSensorViewSet,
    CurrentSensorViewSet, TemperatureSensorViewSet, GyroscopeViewSet,
    AccelerometerViewSet, FanViewSet, CommandView, CustomTokenObtainPairView,
    AlertReceiveView, DeviceStateView
)

router = routers.DefaultRouter()
router.register(r'light-sensor', LightSensorViewSet, basename='light-sensor')
router.register(r'color-sensor', ColorSensorViewSet, basename='color-sensor')
router.register(r'water-flow-sensor', WaterFlowSensorViewSet, basename='water-flow-sensor')
router.register(r'moisture-sensor', MoistureSensorViewSet, basename='moisture-sensor')
router.register(r'overflow-sensor', OverflowSensorViewSet, basename='overflow-sensor')

# Регистрация новых ViewSet'ов
router.register(r'leak-sensor', LeakSensorViewSet, basename='leak-sensor')
router.register(r'lo-sensor', LOSensorViewSet, basename='lo-sensor')
router.register(r'reed-switch1', ReedSwitch1ViewSet, basename='reed-switch1')
router.register(r'reed-switch2', ReedSwitch2ViewSet, basename='reed-switch2')
router.register(r'distance-sensor', DistanceSensorViewSet, basename='distance-sensor')
router.register(r'current-sensor', CurrentSensorViewSet, basename='current-sensor')
router.register(r'temperature-sensor', TemperatureSensorViewSet, basename='temperature-sensor')
router.register(r'gyroscope', GyroscopeViewSet, basename='gyroscope')
router.register(r'accelerometer', AccelerometerViewSet, basename='accelerometer')
router.register(r'fan', FanViewSet, basename='fan')


urlpatterns = [
    path('register/', RegisterView.as_view(), name='register'),
    path('token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('send-command/', CommandView.as_view(), name='send-command'),
    path('receive-alert/', AlertReceiveView.as_view(), name='receive-alert'),
    path('device-state/', DeviceStateView.as_view(), name='device-state'),
    path('', include(router.urls)),
]

```

Contents of api/filters.py:
```
from django_filters import rest_framework as filters
from .models import (
    LightSensor, ColorSensor, WaterFlowSensor, MoistureSensor, OverflowSensor,
    LeakSensor, LOSensor, ReedSwitch1, ReedSwitch2, DistanceSensor,
    CurrentSensor, TemperatureSensor, Gyroscope, Accelerometer, Fan
)

class LightSensorFilter(filters.FilterSet):
    min_value = filters.NumberFilter(field_name="value", lookup_expr='gte')
    max_value = filters.NumberFilter(field_name="value", lookup_expr='lte')
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = LightSensor
        fields = ['min_value', 'max_value', 'start_date', 'end_date']

class ColorSensorFilter(filters.FilterSet):
    min_value = filters.NumberFilter(field_name="value", lookup_expr='gte')
    max_value = filters.NumberFilter(field_name="value", lookup_expr='lte')
    is_detected = filters.BooleanFilter(field_name="is_detected")
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = ColorSensor
        fields = ['min_value', 'max_value', 'is_detected', 'start_date', 'end_date']

class WaterFlowSensorFilter(filters.FilterSet):
    min_value = filters.NumberFilter(field_name="value", lookup_expr='gte')
    max_value = filters.NumberFilter(field_name="value", lookup_expr='lte')
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = WaterFlowSensor
        fields = ['min_value', 'max_value', 'start_date', 'end_date']

class MoistureSensorFilter(filters.FilterSet):
    min_value = filters.NumberFilter(field_name="value", lookup_expr='gte')
    max_value = filters.NumberFilter(field_name="value", lookup_expr='lte')
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = MoistureSensor
        fields = ['min_value', 'max_value', 'start_date', 'end_date']

class OverflowSensorFilter(filters.FilterSet):
    is_overflow = filters.BooleanFilter(field_name="is_overflow")
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = OverflowSensor
        fields = ['is_overflow', 'start_date', 'end_date']

# Фильтры для новых моделей

class LeakSensorFilter(filters.FilterSet):
    min_value = filters.NumberFilter(field_name="value", lookup_expr='gte')
    max_value = filters.NumberFilter(field_name="value", lookup_expr='lte')
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = LeakSensor
        fields = ['min_value', 'max_value', 'start_date', 'end_date']

class LOSensorFilter(filters.FilterSet):
    min_value = filters.NumberFilter(field_name="value", lookup_expr='gte')
    max_value = filters.NumberFilter(field_name="value", lookup_expr='lte')
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = LOSensor
        fields = ['min_value', 'max_value', 'start_date', 'end_date']

class ReedSwitch1Filter(filters.FilterSet):
    is_triggered = filters.BooleanFilter(field_name="is_triggered")
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = ReedSwitch1
        fields = ['is_triggered', 'start_date', 'end_date']

class ReedSwitch2Filter(filters.FilterSet):
    is_triggered = filters.BooleanFilter(field_name="is_triggered")
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = ReedSwitch2
        fields = ['is_triggered', 'start_date', 'end_date']

class DistanceSensorFilter(filters.FilterSet):
    min_value = filters.NumberFilter(field_name="value", lookup_expr='gte')
    max_value = filters.NumberFilter(field_name="value", lookup_expr='lte')
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = DistanceSensor
        fields = ['min_value', 'max_value', 'start_date', 'end_date']

class CurrentSensorFilter(filters.FilterSet):
    min_value = filters.NumberFilter(field_name="value", lookup_expr='gte')
    max_value = filters.NumberFilter(field_name="value", lookup_expr='lte')
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = CurrentSensor
        fields = ['min_value', 'max_value', 'start_date', 'end_date']

class TemperatureSensorFilter(filters.FilterSet):
    min_value = filters.NumberFilter(field_name="value", lookup_expr='gte')
    max_value = filters.NumberFilter(field_name="value", lookup_expr='lte')
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = TemperatureSensor
        fields = ['min_value', 'max_value', 'start_date', 'end_date']

class GyroscopeFilter(filters.FilterSet):
    gyro_x_min = filters.NumberFilter(field_name="gyro_x", lookup_expr='gte')
    gyro_x_max = filters.NumberFilter(field_name="gyro_x", lookup_expr='lte')
    gyro_y_min = filters.NumberFilter(field_name="gyro_y", lookup_expr='gte')
    gyro_y_max = filters.NumberFilter(field_name="gyro_y", lookup_expr='lte')
    gyro_z_min = filters.NumberFilter(field_name="gyro_z", lookup_expr='gte')
    gyro_z_max = filters.NumberFilter(field_name="gyro_z", lookup_expr='lte')
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = Gyroscope
        fields = ['gyro_x_min', 'gyro_x_max', 'gyro_y_min', 'gyro_y_max', 'gyro_z_min', 'gyro_z_max', 'start_date', 'end_date']

class AccelerometerFilter(filters.FilterSet):
    accel_x_min = filters.NumberFilter(field_name="accel_x", lookup_expr='gte')
    accel_x_max = filters.NumberFilter(field_name="accel_x", lookup_expr='lte')
    accel_y_min = filters.NumberFilter(field_name="accel_y", lookup_expr='gte')
    accel_y_max = filters.NumberFilter(field_name="accel_y", lookup_expr='lte')
    accel_z_min = filters.NumberFilter(field_name="accel_z", lookup_expr='gte')
    accel_z_max = filters.NumberFilter(field_name="accel_z", lookup_expr='lte')
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = Accelerometer
        fields = ['accel_x_min', 'accel_x_max', 'accel_y_min', 'accel_y_max', 'accel_z_min', 'accel_z_max', 'start_date', 'end_date']

class FanFilter(filters.FilterSet):
    min_value = filters.NumberFilter(field_name="value", lookup_expr='gte')
    max_value = filters.NumberFilter(field_name="value", lookup_expr='lte')
    start_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='gte')
    end_date = filters.DateTimeFilter(field_name="timestamp", lookup_expr='lte')

    class Meta:
        model = Fan
        fields = ['min_value', 'max_value', 'start_date', 'end_date']

```

Contents of api/views.py:
```
from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
from rest_framework import viewsets, permissions, mixins
from django.contrib.auth.models import User
from rest_framework.decorators import action
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework_simplejwt.views import TokenObtainPairView

from .permissions import AllowCreateWithoutAuthentication, IsAdminUser
from .serializers import (
    UserSerializer,
    LightSensorSerializer,
    ColorSensorSerializer,
    WaterFlowSensorSerializer,
    MoistureSensorSerializer,
    OverflowSensorSerializer,
    LeakSensorSerializer,
    LOSensorSerializer,
    ReedSwitch1Serializer,
    ReedSwitch2Serializer,
    DistanceSensorSerializer,
    CurrentSensorSerializer,
    TemperatureSensorSerializer,
    GyroscopeSerializer,
    AccelerometerSerializer,
    FanSerializer, CustomTokenObtainPairSerializer, AlertSerializer, DeviceStateSerializer
)

from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework import generics, status

from .models import (
    LightSensor, ColorSensor, WaterFlowSensor, MoistureSensor, OverflowSensor,
    LeakSensor, LOSensor, ReedSwitch1, ReedSwitch2, DistanceSensor,
    CurrentSensor, TemperatureSensor, Gyroscope, Accelerometer, Fan, Command
)
from .filters import (
    LightSensorFilter,
    ColorSensorFilter,
    WaterFlowSensorFilter,
    MoistureSensorFilter,
    OverflowSensorFilter,
    LeakSensorFilter,
    LOSensorFilter,
    ReedSwitch1Filter,
    ReedSwitch2Filter,
    DistanceSensorFilter,
    CurrentSensorFilter,
    TemperatureSensorFilter,
    GyroscopeFilter,
    AccelerometerFilter,
    FanFilter
)


class RegisterView(generics.CreateAPIView):
    """
    Регистрация нового пользователя.
    """
    queryset = User.objects.all()
    serializer_class = UserSerializer

    @swagger_auto_schema(
        operation_description="Регистрация нового пользователя",
        tags=["Auth"],
        request_body=UserSerializer,
        responses={
            201: openapi.Response("Пользователь успешно создан", UserSerializer),
            400: "Неверные данные для создания пользователя"
        },
        security=[]  # Нет авторизации для регистрации
    )
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)

class CustomTokenObtainPairView(TokenObtainPairView):
    serializer_class = CustomTokenObtainPairSerializer
# ViewSet для LightSensor
class LightSensorViewSet(mixins.CreateModelMixin,
                         mixins.ListModelMixin,
                         viewsets.GenericViewSet):
    """
    ViewSet для управления данными датчика освещённости.
    """
    queryset = LightSensor.objects.all().order_by('-timestamp')
    serializer_class = LightSensorSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = LightSensorFilter

    @swagger_auto_schema(
        operation_description="Создание записи датчика освещённости",
        responses={
            201: openapi.Response("Запись успешно создана", LightSensorSerializer),
            400: "Неверные данные"
        },
        request_body=LightSensorSerializer,
        tags=["LightSensor"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей датчика освещённости с фильтрацией",
        responses={
            200: openapi.Response("Список записей", LightSensorSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('min_value', openapi.IN_QUERY, description="Минимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('max_value', openapi.IN_QUERY, description="Максимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["LightSensor"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# ViewSet для ColorSensor
class ColorSensorViewSet(mixins.CreateModelMixin,
                         mixins.ListModelMixin,
                         viewsets.GenericViewSet):
    """
    ViewSet для управления данными датчика цвета.
    """
    queryset = ColorSensor.objects.all().order_by('-timestamp')
    serializer_class = ColorSensorSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = ColorSensorFilter

    @swagger_auto_schema(
        operation_description="Создание записи датчика цвета",
        responses={
            201: openapi.Response("Запись успешно создана", ColorSensorSerializer),
            400: "Неверные данные"
        },
        request_body=ColorSensorSerializer,
        tags=["ColorSensor"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей датчика цвета с фильтрацией",
        responses={
            200: openapi.Response("Список записей", ColorSensorSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('min_value', openapi.IN_QUERY, description="Минимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('max_value', openapi.IN_QUERY, description="Максимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('is_detected', openapi.IN_QUERY, description="Обнаружен ли цвет (true/false)", type=openapi.TYPE_BOOLEAN),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["ColorSensor"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# ViewSet для WaterFlowSensor
class WaterFlowSensorViewSet(mixins.CreateModelMixin,
                             mixins.ListModelMixin,
                             viewsets.GenericViewSet):
    """
    ViewSet для управления данными датчика потока воды.
    """
    queryset = WaterFlowSensor.objects.all().order_by('-timestamp')
    serializer_class = WaterFlowSensorSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = WaterFlowSensorFilter

    @swagger_auto_schema(
        operation_description="Создание записи датчика потока воды",
        responses={
            201: openapi.Response("Запись успешно создана", WaterFlowSensorSerializer),
            400: "Неверные данные"
        },
        request_body=WaterFlowSensorSerializer,
        tags=["WaterFlowSensor"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей датчика потока воды с фильтрацией",
        responses={
            200: openapi.Response("Список записей", WaterFlowSensorSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('min_value', openapi.IN_QUERY, description="Минимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('max_value', openapi.IN_QUERY, description="Максимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["WaterFlowSensor"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# ViewSet для MoistureSensor
class MoistureSensorViewSet(mixins.CreateModelMixin,
                             mixins.ListModelMixin,
                             viewsets.GenericViewSet):
    """
    ViewSet для управления данными датчика влаги.
    """
    queryset = MoistureSensor.objects.all().order_by('-timestamp')
    serializer_class = MoistureSensorSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = MoistureSensorFilter

    @swagger_auto_schema(
        operation_description="Создание записи датчика влаги",
        responses={
            201: openapi.Response("Запись успешно создана", MoistureSensorSerializer),
            400: "Неверные данные"
        },
        request_body=MoistureSensorSerializer,
        tags=["MoistureSensor"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей датчика влаги с фильтрацией",
        responses={
            200: openapi.Response("Список записей", MoistureSensorSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('min_value', openapi.IN_QUERY, description="Минимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('max_value', openapi.IN_QUERY, description="Максимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["MoistureSensor"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# ViewSet для OverflowSensor
class OverflowSensorViewSet(mixins.CreateModelMixin,
                            mixins.ListModelMixin,
                            viewsets.GenericViewSet):
    """
    ViewSet для управления данными о переполнении.
    """
    queryset = OverflowSensor.objects.all().order_by('-timestamp')
    serializer_class = OverflowSensorSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = OverflowSensorFilter

    @swagger_auto_schema(
        operation_description="Создание записи о переполнении",
        responses={
            201: openapi.Response("Запись успешно создана", OverflowSensorSerializer),
            400: "Неверные данные"
        },
        request_body=OverflowSensorSerializer,
        tags=["OverflowSensor"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей о переполнении с фильтрацией",
        responses={
            200: openapi.Response("Список записей", OverflowSensorSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('is_overflow', openapi.IN_QUERY, description="Переполнено ли (true/false)", type=openapi.TYPE_BOOLEAN),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["OverflowSensor"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# ViewSet для новых сенсоров

# LeakSensor
class LeakSensorViewSet(mixins.CreateModelMixin,
                         mixins.ListModelMixin,
                         viewsets.GenericViewSet):
    """
    ViewSet для управления данными датчика протечки.
    """
    queryset = LeakSensor.objects.all().order_by('-timestamp')
    serializer_class = LeakSensorSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = LeakSensorFilter

    @swagger_auto_schema(
        operation_description="Создание записи датчика протечки",
        responses={
            201: openapi.Response("Запись успешно создана", LeakSensorSerializer),
            400: "Неверные данные"
        },
        request_body=LeakSensorSerializer,
        tags=["LeakSensor"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей датчика протечки с фильтрацией",
        responses={
            200: openapi.Response("Список записей", LeakSensorSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('min_value', openapi.IN_QUERY, description="Минимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('max_value', openapi.IN_QUERY, description="Максимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["LeakSensor"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# LOSensor
class LOSensorViewSet(mixins.CreateModelMixin,
                      mixins.ListModelMixin,
                      viewsets.GenericViewSet):
    """
    ViewSet для управления данными датчика ЛОС.
    """
    queryset = LOSensor.objects.all().order_by('-timestamp')
    serializer_class = LOSensorSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = LOSensorFilter

    @swagger_auto_schema(
        operation_description="Создание записи датчика ЛОС",
        responses={
            201: openapi.Response("Запись успешно создана", LOSensorSerializer),
            400: "Неверные данные"
        },
        request_body=LOSensorSerializer,
        tags=["LOSensor"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей датчика ЛОС с фильтрацией",
        responses={
            200: openapi.Response("Список записей", LOSensorSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('min_value', openapi.IN_QUERY, description="Минимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('max_value', openapi.IN_QUERY, description="Максимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["LOSensor"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# ReedSwitch1
class ReedSwitch1ViewSet(mixins.CreateModelMixin,
                          mixins.ListModelMixin,
                          viewsets.GenericViewSet):
    """
    ViewSet для управления данными Геркона №1.
    """
    queryset = ReedSwitch1.objects.all().order_by('-timestamp')
    serializer_class = ReedSwitch1Serializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = ReedSwitch1Filter

    @swagger_auto_schema(
        operation_description="Создание записи Геркона №1",
        responses={
            201: openapi.Response("Запись успешно создана", ReedSwitch1Serializer),
            400: "Неверные данные"
        },
        request_body=ReedSwitch1Serializer,
        tags=["ReedSwitch1"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей Геркона №1 с фильтрацией",
        responses={
            200: openapi.Response("Список записей", ReedSwitch1Serializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('is_triggered', openapi.IN_QUERY, description="Сработан ли геркон (true/false)", type=openapi.TYPE_BOOLEAN),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["ReedSwitch1"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# ReedSwitch2
class ReedSwitch2ViewSet(mixins.CreateModelMixin,
                          mixins.ListModelMixin,
                          viewsets.GenericViewSet):
    """
    ViewSet для управления данными Геркона №2.
    """
    queryset = ReedSwitch2.objects.all().order_by('-timestamp')
    serializer_class = ReedSwitch2Serializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = ReedSwitch2Filter

    @swagger_auto_schema(
        operation_description="Создание записи Геркона №2",
        responses={
            201: openapi.Response("Запись успешно создана", ReedSwitch2Serializer),
            400: "Неверные данные"
        },
        request_body=ReedSwitch2Serializer,
        tags=["ReedSwitch2"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей Геркона №2 с фильтрацией",
        responses={
            200: openapi.Response("Список записей", ReedSwitch2Serializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('is_triggered', openapi.IN_QUERY, description="Сработан ли геркон (true/false)", type=openapi.TYPE_BOOLEAN),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["ReedSwitch2"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# DistanceSensor
class DistanceSensorViewSet(mixins.CreateModelMixin,
                            mixins.ListModelMixin,
                            viewsets.GenericViewSet):
    """
    ViewSet для управления данными датчика расстояния.
    """
    queryset = DistanceSensor.objects.all().order_by('-timestamp')
    serializer_class = DistanceSensorSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = DistanceSensorFilter

    @swagger_auto_schema(
        operation_description="Создание записи датчика расстояния",
        responses={
            201: openapi.Response("Запись успешно создана", DistanceSensorSerializer),
            400: "Неверные данные"
        },
        request_body=DistanceSensorSerializer,
        tags=["DistanceSensor"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей датчика расстояния с фильтрацией",
        responses={
            200: openapi.Response("Список записей", DistanceSensorSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('min_value', openapi.IN_QUERY, description="Минимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('max_value', openapi.IN_QUERY, description="Максимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["DistanceSensor"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# CurrentSensor
class CurrentSensorViewSet(mixins.CreateModelMixin,
                            mixins.ListModelMixin,
                            viewsets.GenericViewSet):
    """
    ViewSet для управления данными датчика тока.
    """
    queryset = CurrentSensor.objects.all().order_by('-timestamp')
    serializer_class = CurrentSensorSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = CurrentSensorFilter

    @swagger_auto_schema(
        operation_description="Создание записи датчика тока",
        responses={
            201: openapi.Response("Запись успешно создана", CurrentSensorSerializer),
            400: "Неверные данные"
        },
        request_body=CurrentSensorSerializer,
        tags=["CurrentSensor"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей датчика тока с фильтрацией",
        responses={
            200: openapi.Response("Список записей", CurrentSensorSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('min_value', openapi.IN_QUERY, description="Минимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('max_value', openapi.IN_QUERY, description="Максимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["CurrentSensor"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# TemperatureSensor
class TemperatureSensorViewSet(mixins.CreateModelMixin,
                                mixins.ListModelMixin,
                                viewsets.GenericViewSet):
    """
    ViewSet для управления данными датчика температуры.
    """
    queryset = TemperatureSensor.objects.all().order_by('-timestamp')
    serializer_class = TemperatureSensorSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = TemperatureSensorFilter

    @swagger_auto_schema(
        operation_description="Создание записи датчика температуры",
        responses={
            201: openapi.Response("Запись успешно создана", TemperatureSensorSerializer),
            400: "Неверные данные"
        },
        request_body=TemperatureSensorSerializer,
        tags=["TemperatureSensor"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей датчика температуры с фильтрацией",
        responses={
            200: openapi.Response("Список записей", TemperatureSensorSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('min_value', openapi.IN_QUERY, description="Минимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('max_value', openapi.IN_QUERY, description="Максимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["TemperatureSensor"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# Gyroscope
class GyroscopeViewSet(mixins.CreateModelMixin,
                        mixins.ListModelMixin,
                        viewsets.GenericViewSet):
    """
    ViewSet для управления данными гироскопа.
    """
    queryset = Gyroscope.objects.all().order_by('-timestamp')
    serializer_class = GyroscopeSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = GyroscopeFilter

    @swagger_auto_schema(
        operation_description="Создание записи гироскопа",
        responses={
            201: openapi.Response("Запись успешно создана", GyroscopeSerializer),
            400: "Неверные данные"
        },
        request_body=GyroscopeSerializer,
        tags=["Gyroscope"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей гироскопа с фильтрацией",
        responses={
            200: openapi.Response("Список записей", GyroscopeSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('gyro_x_min', openapi.IN_QUERY, description="Минимальное значение по оси X", type=openapi.TYPE_NUMBER),
            openapi.Parameter('gyro_x_max', openapi.IN_QUERY, description="Максимальное значение по оси X", type=openapi.TYPE_NUMBER),
            openapi.Parameter('gyro_y_min', openapi.IN_QUERY, description="Минимальное значение по оси Y", type=openapi.TYPE_NUMBER),
            openapi.Parameter('gyro_y_max', openapi.IN_QUERY, description="Максимальное значение по оси Y", type=openapi.TYPE_NUMBER),
            openapi.Parameter('gyro_z_min', openapi.IN_QUERY, description="Минимальное значение по оси Z", type=openapi.TYPE_NUMBER),
            openapi.Parameter('gyro_z_max', openapi.IN_QUERY, description="Максимальное значение по оси Z", type=openapi.TYPE_NUMBER),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["Gyroscope"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# Accelerometer
class AccelerometerViewSet(mixins.CreateModelMixin,
                           mixins.ListModelMixin,
                           viewsets.GenericViewSet):
    """
    ViewSet для управления данными акселерометра.
    """
    queryset = Accelerometer.objects.all().order_by('-timestamp')
    serializer_class = AccelerometerSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = AccelerometerFilter

    @swagger_auto_schema(
        operation_description="Создание записи акселерометра",
        responses={
            201: openapi.Response("Запись успешно создана", AccelerometerSerializer),
            400: "Неверные данные"
        },
        request_body=AccelerometerSerializer,
        tags=["Accelerometer"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей акселерометра с фильтрацией",
        responses={
            200: openapi.Response("Список записей", AccelerometerSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('accel_x_min', openapi.IN_QUERY, description="Минимальное значение по оси X", type=openapi.TYPE_NUMBER),
            openapi.Parameter('accel_x_max', openapi.IN_QUERY, description="Максимальное значение по оси X", type=openapi.TYPE_NUMBER),
            openapi.Parameter('accel_y_min', openapi.IN_QUERY, description="Минимальное значение по оси Y", type=openapi.TYPE_NUMBER),
            openapi.Parameter('accel_y_max', openapi.IN_QUERY, description="Максимальное значение по оси Y", type=openapi.TYPE_NUMBER),
            openapi.Parameter('accel_z_min', openapi.IN_QUERY, description="Минимальное значение по оси Z", type=openapi.TYPE_NUMBER),
            openapi.Parameter('accel_z_max', openapi.IN_QUERY, description="Максимальное значение по оси Z", type=openapi.TYPE_NUMBER),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["Accelerometer"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


# Fan
class FanViewSet(mixins.CreateModelMixin,
                mixins.ListModelMixin,
                viewsets.GenericViewSet):
    """
    ViewSet для управления данными вентилятора.
    """
    queryset = Fan.objects.all().order_by('-timestamp')
    serializer_class = FanSerializer
    permission_classes = [AllowCreateWithoutAuthentication]
    filter_backends = [DjangoFilterBackend]
    filterset_class = FanFilter

    @swagger_auto_schema(
        operation_description="Создание записи вентилятора",
        responses={
            201: openapi.Response("Запись успешно создана", FanSerializer),
            400: "Неверные данные"
        },
        request_body=FanSerializer,
        tags=["Fan"],
        security=[]  # Разрешить без авторизации
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Получение списка записей вентилятора с фильтрацией",
        responses={
            200: openapi.Response("Список записей", FanSerializer(many=True))
        },
        manual_parameters=[
            openapi.Parameter('min_value', openapi.IN_QUERY, description="Минимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('max_value', openapi.IN_QUERY, description="Максимальное значение", type=openapi.TYPE_NUMBER),
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Начальная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="Конечная дата (ISO 8601)", type=openapi.TYPE_STRING, format=openapi.FORMAT_DATETIME),
        ],
        tags=["Fan"],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)



# api/views.py

import requests
from rest_framework import status
from rest_framework.views import APIView
from rest_framework.response import Response
from .serializers import CommandSerializer
from django.conf import settings

class CommandView(APIView):
    """
    Прием команд от фронтенда и отправка их на ESP-устройства.
    """
    permission_classes = [permissions.IsAuthenticated]  # Требуется аутентификация для отправки команд

    command_schema = openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            'pump': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Помпа включена/выключена'),
            'led': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Лента включена/выключена'),
            'servo1': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Серво №1 включена/выключена'),
            'servo2': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Серво №2 включена/выключена'),
            'auto_light': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Авто-свет включен/выключен'),
            'brightness': openapi.Schema(type=openapi.TYPE_NUMBER, description='Яркость ленты'),
            'fan': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Вентилятор включен/выключен'),
            'ventilation': openapi.Schema(type=openapi.TYPE_BOOLEAN,
                                          description='Режим проветривания включен/выключен'),
            'earthquake': openapi.Schema(type=openapi.TYPE_BOOLEAN,
                                         description='Землетрясение обнаружено/не обнаружено'),
            'user_name': openapi.Schema(type=openapi.TYPE_STRING, description='Текст авторизации'),
        },
        required=['authorization']
    )

    @swagger_auto_schema(
        request_body=command_schema,
        responses={
            200: openapi.Response(
                description="Результаты отправки команд",
                schema=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'results': openapi.Schema(
                            type=openapi.TYPE_OBJECT,
                            additional_properties=openapi.Schema(type=openapi.TYPE_STRING)
                        )
                    }
                )
            ),
            400: openapi.Response(description="Неверные данные"),
        },
        operation_description="Отправка команд на ESP-устройства",
        tags=["Commands"],
    )
    def post(self, request, format=None):
        serializer = CommandSerializer(data=request.data)
        if serializer.is_valid():
            data = serializer.validated_data
            user_name = request.data.get("user_name")
            user = request.user  # Получение текущего аутентифицированного пользователя

            # Список ESP-устройств (можно вынести в настройки)
            esp_devices = settings.ESP_DEVICES

            # Формирование команд для отправки и сохранение в базе данных
            commands = {}
            for key in ['pump', 'led', 'servo1', 'servo2', 'auto_light', 'brightness', 'fan', 'ventilation', 'earthquake']:
                if key in data:
                    commands[key] = data[key]
                    # Сохранение команды в базе данных
                    Command.objects.create(
                        user=user,
                        command_type=key,
                        value=str(data[key])
                    )
            commands['user_name'] = user_name
            # Отправка команд на ESP-устройства
            results = {}
            for esp in esp_devices:
                try:
                    response = requests.post(esp, json=commands, timeout=5)
                    if response.status_code == 200:
                        results[esp] = "Success"
                    else:
                        results[esp] = f"Failed with status {response.status_code}"
                except requests.exceptions.RequestException as e:
                    results[esp] = f"Error: {str(e)}"

            return Response({"results": results}, status=status.HTTP_200_OK)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
class AlertReceiveView(APIView):
    """
    Эндпоинт для приема событий от ESP-устройств.
    """
    permission_classes = [AllowAny]  # Разрешаем доступ без аутентификации

    alert_schema = openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            'alert_type': openapi.Schema(type=openapi.TYPE_STRING, description='Тип события', enum=['earthquake', 'ventilation']),
            'is_active': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Состояние события'),
            'received_from': openapi.Schema(type=openapi.TYPE_STRING, description='Откуда получено событие'),
        },
        required=['alert_type', 'is_active']
    )

    @swagger_auto_schema(
        request_body=alert_schema,
        responses={
            201: openapi.Response("Событие успешно создано", AlertSerializer),
            400: "Неверные данные"
        },
        operation_description="Прием событий от ESP-устройств",
        tags=["Alerts"],
        security=[]  # Без авторизации
    )
    def post(self, request, format=None):
        serializer = AlertSerializer(data=request.data)
        if serializer.is_valid():
            alert = serializer.save()
            # Отправка уведомления через Channels
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                "alerts",  # Название группы
                {
                    "type": "alert_message",
                    "message": {
                        "alert_type": alert.get_alert_type_display(),
                        "is_active": alert.is_active,
                        "timestamp": alert.timestamp.isoformat(),
                        "received_from": alert.received_from,
                    }
                }
            )
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class DeviceStateView(APIView):
    """
    Эндпоинт для получения текущих состояний девайсов.
    """
    permission_classes = [permissions.AllowAny]  # Настройте разрешения при необходимости

    def get(self, request, format=None):
        # Определяем типы девайсов
        device_types = ['pump', 'led', 'servo1', 'servo2', 'auto_light', 'brightness', 'fan', 'ventilation',
                        'earthquake']

        state = {}
        for device in device_types:
            latest_command = Command.objects.filter(command_type=device).order_by('-timestamp').first()
            if latest_command:
                # Обработка значений в зависимости от типа девайса
                if device == 'brightness':
                    try:
                        state[device] = float(latest_command.value)
                    except ValueError:
                        state[device] = 0.0  # Значение по умолчанию при ошибке
                else:
                    # Предполагаем, что остальные девайсы имеют булевое значение
                    state[device] = latest_command.value.lower() == 'true'
            else:
                # Значения по умолчанию, если команды еще не были отправлены
                if device == 'brightness':
                    state[device] = 0.0
                else:
                    state[device] = False
        serializer = DeviceStateSerializer(state)
        return Response(serializer.data, status=status.HTTP_200_OK)
```

Contents of api/migrations/0008_accelerometer_currentsensor_distancesensor_fan_and_more.py:
```
# Generated by Django 4.2.16 on 2024-12-06 05:58

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0007_colorsensor_lightsensor_moisturesensor_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Accelerometer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accel_x', models.FloatField()),
                ('accel_y', models.FloatField()),
                ('accel_z', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CurrentSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DistanceSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Fan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Gyroscope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gyro_x', models.FloatField()),
                ('gyro_y', models.FloatField()),
                ('gyro_z', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LeakSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LOSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReedSwitch1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_triggered', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReedSwitch2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_triggered', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TemperatureSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]

```

Contents of api/migrations/0009_command.py:
```
# Generated by Django 4.2.16 on 2024-12-06 06:30

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0008_accelerometer_currentsensor_distancesensor_fan_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Command',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('command_type', models.CharField(choices=[('pump', 'Помпа'), ('led', 'Лента'), ('servo1', 'Серво №1'), ('servo2', 'Серво №2'), ('auto_light', 'Авто-свет'), ('brightness', 'Яркость'), ('authorization', 'Авторизация')], max_length=20)),
                ('value', models.CharField(max_length=100)),
                ('user_name', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]

```

Contents of api/migrations/0006_devicestate_inspectionitem_stationreading_and_more.py:
```
# Generated by Django 4.2.16 on 2024-12-06 05:44

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0005_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pump_on', models.BooleanField(default=False)),
                ('fan_speed', models.IntegerField(blank=True, null=True)),
                ('door_open', models.BooleanField(default=False)),
                ('window_open', models.BooleanField(default=False)),
                ('led_brightness', models.IntegerField(blank=True, null=True)),
                ('auto_led_mode', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='InspectionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('checked', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='StationReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('light_value', models.FloatField(blank=True, null=True)),
                ('color_value', models.FloatField(blank=True, null=True)),
                ('color_detected', models.BooleanField(default=False)),
                ('water_flow', models.FloatField(blank=True, null=True)),
                ('initial_volume', models.FloatField(blank=True, null=True)),
                ('storage_volume', models.FloatField(blank=True, null=True)),
                ('overflow', models.BooleanField(default=False)),
                ('voc_value', models.FloatField(blank=True, null=True)),
                ('voc_detected', models.BooleanField(default=False)),
                ('reed_switch_door', models.BooleanField(default=False)),
                ('reed_switch_window', models.BooleanField(default=False)),
                ('distance_value', models.FloatField(blank=True, null=True)),
                ('distance_detected', models.BooleanField(default=False)),
                ('current', models.FloatField(blank=True, null=True)),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('humidity', models.FloatField(blank=True, null=True)),
                ('gyro_x', models.FloatField(blank=True, null=True)),
                ('gyro_y', models.FloatField(blank=True, null=True)),
                ('gyro_z', models.FloatField(blank=True, null=True)),
                ('accel_x', models.FloatField(blank=True, null=True)),
                ('accel_y', models.FloatField(blank=True, null=True)),
                ('accel_z', models.FloatField(blank=True, null=True)),
                ('fan_rpm', models.FloatField(blank=True, null=True)),
                ('earthquake_alert', models.BooleanField(default=False)),
            ],
        ),
        migrations.DeleteModel(
            name='ColorSensor',
        ),
        migrations.DeleteModel(
            name='LightSensor',
        ),
        migrations.DeleteModel(
            name='MoistureSensor',
        ),
        migrations.DeleteModel(
            name='OverflowSensor',
        ),
        migrations.DeleteModel(
            name='WaterFlowSensor',
        ),
    ]

```

Contents of api/migrations/0005_initial.py:
```
# Generated by Django 4.2.16 on 2024-12-06 04:55

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('api', '0004_remove_deviceinspection_device_delete_lightingmode_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ColorSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('is_detected', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LightSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MoistureSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='OverflowSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_overflow', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='WaterFlowSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]

```

Contents of api/migrations/__init__.py:
```

```

Contents of api/migrations/0002_device_lightingmode_measurement_sensor_delete_post_and_more.py:
```
# Generated by Django 4.2.16 on 2024-12-06 03:31

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('device_type', models.CharField(choices=[('pump', 'Pump'), ('fan', 'Fan'), ('servo', 'Servo (door/window)'), ('led', 'LED Strip')], max_length=20)),
                ('is_active', models.BooleanField(default=False)),
                ('brightness', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LightingMode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode_name', models.CharField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('fluid_level', models.FloatField(blank=True, null=True)),
                ('co2', models.FloatField(blank=True, null=True)),
                ('humidity', models.FloatField(blank=True, null=True)),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('illumination', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
                ('volume', models.FloatField(blank=True, null=True)),
                ('fluid_level', models.FloatField(blank=True, null=True)),
                ('leakage', models.BooleanField(default=False)),
                ('fill_level', models.FloatField(blank=True, null=True)),
                ('illumination', models.FloatField(blank=True, null=True)),
                ('voc', models.FloatField(blank=True, null=True)),
                ('co2', models.FloatField(blank=True, null=True)),
                ('humidity', models.FloatField(blank=True, null=True)),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('energy_consumption', models.FloatField(blank=True, null=True)),
                ('gyro_data', models.CharField(blank=True, max_length=100, null=True)),
                ('accelerometer_data', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.DeleteModel(
            name='Post',
        ),
        migrations.AddField(
            model_name='measurement',
            name='sensor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='api.sensor'),
        ),
    ]

```

Contents of api/migrations/0010_remove_command_user_name_command_user_and_more.py:
```
# Generated by Django 4.2.16 on 2024-12-06 08:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('api', '0009_command'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='command',
            name='user_name',
        ),
        migrations.AddField(
            model_name='command',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='commands', to=settings.AUTH_USER_MODEL),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='command',
            name='command_type',
            field=models.CharField(choices=[('pump', 'Помпа'), ('led', 'Лента'), ('servo1', 'Серво №1'), ('servo2', 'Серво №2'), ('auto_light', 'Авто-свет'), ('brightness', 'Яркость'), ('fan', 'Вентилятор'), ('ventilation', 'Проветривание')], max_length=20),
        ),
    ]

```

Contents of api/migrations/0003_deviceinspection.py:
```
# Generated by Django 4.2.16 on 2024-12-06 03:49

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0002_device_lightingmode_measurement_sensor_delete_post_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceInspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checked', models.BooleanField(default=False)),
                ('last_checked_at', models.DateTimeField(blank=True, null=True)),
                ('device', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='inspection', to='api.device')),
            ],
        ),
    ]

```

Contents of api/migrations/0007_colorsensor_lightsensor_moisturesensor_and_more.py:
```
# Generated by Django 4.2.16 on 2024-12-06 05:50

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0006_devicestate_inspectionitem_stationreading_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ColorSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('is_detected', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LightSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MoistureSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='OverflowSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_overflow', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='WaterFlowSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.DeleteModel(
            name='DeviceState',
        ),
        migrations.DeleteModel(
            name='InspectionItem',
        ),
        migrations.DeleteModel(
            name='StationReading',
        ),
    ]

```

Contents of api/migrations/0001_initial.py:
```
# Generated by Django 4.2.16 on 2024-10-07 08:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

```

Contents of api/migrations/0004_remove_deviceinspection_device_delete_lightingmode_and_more.py:
```
# Generated by Django 4.2.16 on 2024-12-06 04:38

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0003_deviceinspection'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='deviceinspection',
            name='device',
        ),
        migrations.DeleteModel(
            name='LightingMode',
        ),
        migrations.RemoveField(
            model_name='measurement',
            name='sensor',
        ),
        migrations.DeleteModel(
            name='Device',
        ),
        migrations.DeleteModel(
            name='DeviceInspection',
        ),
        migrations.DeleteModel(
            name='Measurement',
        ),
        migrations.DeleteModel(
            name='Sensor',
        ),
    ]

```

Contents of api/migrations/__pycache__/0003_deviceinspection.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/migrations/__pycache__/0002_device_lightingmode_measurement_sensor_delete_post_and_more.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/migrations/__pycache__/0004_remove_deviceinspection_device_delete_lightingmode_and_more.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/migrations/__pycache__/0006_devicestate_inspectionitem_stationreading_and_more.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/migrations/__pycache__/0001_initial.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/migrations/__pycache__/0005_initial.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/migrations/__pycache__/0008_accelerometer_currentsensor_distancesensor_fan_and_more.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/migrations/__pycache__/0007_colorsensor_lightsensor_moisturesensor_and_more.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/migrations/__pycache__/0009_command.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/migrations/__pycache__/__init__.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/migrations/__pycache__/0010_remove_command_user_name_command_user_and_more.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/__pycache__/routing.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/__pycache__/views.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/__pycache__/filters.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/__pycache__/consumers.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/__pycache__/urls.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/__pycache__/serializers.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/__pycache__/models.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/__pycache__/admin.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/__pycache__/permissions.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/__pycache__/apps.cpython-310.pyc:
```
[Could not decode file contents]

```

Contents of api/__pycache__/__init__.cpython-310.pyc:
```
[Could not decode file contents]

```

